You are to build a professional, production-quality Flask web application called Acetic Acid Storage Tank Design Tool.

Objective
Develop an interactive engineering calculator web app that automates the design of atmospheric storage tanks for concentrated acetic acid following API 650 design rules, based on the design philosophy and formulas in the attached Acetic Acid Storage Tank Design PDF.

Core Requirements
Tech Stack

Backend: Python 3.11, Flask.

Frontend: HTML5, CSS3, Bootstrap 5 for responsive layout.

Charts: Plotly.js for live, interactive charts.

File Export: pandas + openpyxl for Excel; reportlab or fpdf for PDF.

Main Pages

Home Page:

Title: “Acetic Acid Storage Tank Design Tool”

Brief intro about acetic acid and project purpose.

Design Form Page:

Inputs:

Plant production rate (TPD).

Holding period (days).

Density (default = 1049 kg/m³).

Max fill fraction (default = 85%).

Corrosion allowance (default = 1.5 mm).

Number of tanks (default = 2).

Allowable stresses (Sd, St) with default API 650 SS316L values.

Submit button → POST to backend.

Results Page:

Displays:

Total storage volume needed.

Tank diameter & height.

Shell thickness (per course, from API 650 One-Foot Method).

Bottom & roof plate thickness.

Bund volume (110% largest tank).

Table format:

mathematica
Copy
Edit
Sr No | Tank No | Chemical to store | Capacity (m³) | Dimensions (D×H) | Thickness (mm)
Tank diagram (simple cylinder with D & H labels) using Plotly or matplotlib rendered to PNG.

Interactive Chart:

Plot how shell thickness changes with different tank heights for the same total capacity.

Use Plotly.js so the chart can be zoomed, hovered for data points, and exported as an image.

Chart updates automatically based on user input from the form.

Download buttons: Excel and PDF report.

Calculation Logic

Implement capacity calculation from production rate × holding days.

Apply fill fraction to find geometric volume.

Split between number of tanks (default = 2).

Suggest optimal D:H ratio (~1:1.5 to 1:2).

Calculate shell thickness per API 650 formula:

ini
Copy
Edit
td = (Sd × 4.9 × D × (H − 0.3) × G) + CA
tt = (St × 4.9 × D × (H − 0.3))
Take the maximum, round up to nearest standard plate thickness.

Output bottom & roof thickness per API minimums + CA.

Professional Touches

Clean, responsive UI with Bootstrap cards for input/output.

Include “Based on API 650 and PDF design basis” footer note.

Validation for all inputs.

Default values pre-filled for acetic acid service.

Fully commented Python code with docstrings.

Deliverables

app.py Flask application.

templates/ with HTML pages.

static/ for CSS/JS/images.

requirements.txt for deployment.

README.md with setup & usage instructions.